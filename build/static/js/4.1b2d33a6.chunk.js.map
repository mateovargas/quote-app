{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","components/pages/QuoteDetail.js","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","components/pages/AllQuotes.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url","QuoteItem","QuoteList","history","useHistory","location","useLocation","console","log","quotes","ascending","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","push","pathname","list","NoQuotesFound","noquotes","AllQuotes","getAllQuotes","loadedQuotes"],"mappings":"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","file":"static/js/4.1b2d33a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error} = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {sendRequest, status, data: loadedComments, error} = useHttp(getAllComments);\n  const {quoteId} = params;\n\n  useEffect(() => {\n    sendRequest(quoteId)\n  },[quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if(status === 'pending'){\n    comments = <div className=\"centered\"><LoadingSpinner /></div>\n  }\n\n  if(status === 'completed' && loadedComments){\n    comments = <CommentsList comments={loadedComments}/>\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className=\"centered\">No comments have been added yet!</p>;\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={params.quoteId} onAddedComment={addedCommentHandler}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\nimport { Fragment, useEffect } from 'react';\nimport Comments from '../comments/Comments';\nimport HighlightedQuote from '../quotes/HighlightedQuote';\nimport useHttp from '../../hooks/use-http';\nimport { getSingleQuote } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nconst QuoteDetail = () => {\n    const params = useParams();\n    const match = useRouteMatch();\n    const { quoteId } = params;\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    },[sendRequest, quoteId]);\n\n    if(status === 'pending'){\n        return(\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if(error){\n        return(\n            <p className=\"centered\">{error}</p>\n        )\n    }\n    if(!loadedQuote.text){\n        return <p className=\"centered\">No quote found!</p>;\n    }\n\n    return (\n        <Fragment>\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\n            <Route path={match.path} exact>\n                <div className=\"centered\">\n                    <Link className='btn--flat' to={`${match.url}/comments`}>Load Comments</Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </Fragment>\n    );\n};\n\nexport default QuoteDetail;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport QuoteDetail from '../pages/QuoteDetail';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if(ascending){\n      return quoteA.id > quoteB.id ? 1 : -1;\n    }\n    else{\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  console.log(\"location: \", location);\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n  };\n  \n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Descending' : 'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <a className='btn'>\n        Add a Quote\n      </a>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import QuoteList from '../quotes/QuoteList';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport useHttp from '../../hooks/use-http';\nimport { getAllQuotes } from '../../lib/api';\nimport { useEffect } from 'react';\nimport NoQuotesFound from '../quotes/NoQuotesFound';\n\nconst AllQuotes = () => {\n    const { sendRequest, status, data: loadedQuotes, error } = useHttp(getAllQuotes, true);\n    useEffect(() => {\n        sendRequest();\n    }, [sendRequest]);\n    console.log(\"status: \", status);\n    if(status === 'pending'){\n        return(\n            <div className=\"centered\">\n                <LoadingSpinner />    \n            </div>\n        )\n    }\n\n    if(error){\n        return(\n            <p className=\"centered focused\">\n                {error}\n            </p>\n        )\n    }\n\n    if(status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)){\n        return <NoQuotesFound />\n    };\n\n    return (\n        <QuoteList quotes={loadedQuotes}/>\n    );\n};\n\nexport default AllQuotes;"],"sourceRoot":""}